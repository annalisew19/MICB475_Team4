# Random Forest Model 

# Based on this guide: https://www.r-bloggers.com/2021/04/random-forest-in-r/

# Load library
install.packages("randomForest")
install.packages("caret")
library(randomForest)
library(datasets)
library(caret)
library(tidyverse)
library(phyloseq)



#load IVF OTU table
otufp <- "../data_files/ivf_export/ivf-table_export/feature-table.txt"
ivf_otu <- read_delim(file = otufp, delim = "\t", skip = 1, col_types = cols(.default = "d", `#OTU ID` = "c"))

print(colnames(ivf_otu)[1])

otu_counts <- ivf_otu[, -1]
ivf_otu_transposed <- t(otu_counts)
colnames(ivf_otu_transposed) <- ivf_otu$ '#OTU ID'


# Load metadata
ivf_metaFP <- "../data_files/IVF_metadata.tsv"
ivf_meta <- read_delim(ivf_metaFP)

# Create new column named "outcome" 
# filter out NA in "disease" column
# successful if "disease" = Live birth, Ongoing pregnancy 
# unsuccessful if "disease" = Clinical miscarriage, Biochemical pregnancy, No pregnancy

ivf_meta_updated <- ivf_meta %>%
  filter(disease != "NA: Not Applicable") %>%
  mutate(outcome = ifelse(disease %in% c("Live birth", 
                                         "Ongoing pregnancy"),
                          "successful",
                          ifelse(disease %in% c("Clinical miscarriage",
                                                "Biochemical pregnancy",
                                                "No pregnancy", 
                                                "Ectopic pregnancy"),
                                 "unsuccessful", NA)))

###updated till here

# Ensure sample size is the same across categories
data$Species <- as.factor(data$Species)
table(data$Species)

# Lets start with random seed so the outcome will be repeatable and store train and test data.
set.seed(222)
ind <- sample(2, nrow(data), replace = TRUE, prob = c(0.7, 0.3))
train <- data[ind==1,]
test <- data[ind==2,]

# Run the random forest code on the training data
rf <- randomForest(Species~., data=train, proximity=TRUE)
print(rf)

# you can plot the model
plot(rf)
MDSplot(rf, train$Species)
varImpPlot(rf)

# prediction and confusion matrix
p1 <- predict(rf, train)
confusionMatrix(p1, train$ Species)

# run prediction and confusion on the test data now
p2 <- predict(rf, test)
confusionMatrix(p2, test$ Species)

